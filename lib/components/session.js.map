{"version":3,"sources":["components/session.js"],"names":["logger","networking","interactive","sessionStorage","homedir","userId","sessionToken","abstractedPromise","createPromise","Promise","fulfill","_fetchSessionFile","then","credentials","catch","error","info","getApps","ownerId","err","result","green","red","resolve","sessionValid","undefined","reject","email","password","inputParams","field","name","question","type","abstractedValidator","fields","createLoginToken","serverResponse","user_id","token","_createSessionFile","successResolve","failureResolve","promise","params","response","validationPassing","questions","forEach","param","trim","push","message","length","prompt","promptResult","Object","assign","_deleteSessonFile","readFile","data","JSON","parse","writeFile","stringify","unlink","code"],"mappings":"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","file":"session.js","sourcesContent":["import os from 'os';\nimport fs from 'fs';\nimport inquirer from 'inquirer';\nimport _ from 'lodash';\nimport colors from 'colors/safe';\n\nexport default class {\n\n  constructor({ logger, networking, interactive = false }) {\n    this.logger = logger;\n    this.networking = networking;\n    this.sessionStorage = os.homedir() + '/.pubnub-cli';\n    this.interactive = interactive;\n  }\n\n  checkSession({ userId, sessionToken } = {}) {\n    const abstractedPromise = this.createPromise();\n\n    // abstract CLI // API\n    new Promise((fulfill) => {\n      if (this.interactive) {\n        this._fetchSessionFile()\n          .then((credentials) => { fulfill(credentials); })\n          .catch((error) => {\n            this.logger.info('Session does not exist; credentials found failed to load', error);\n            return;\n          });\n      } else {\n        fulfill({ userId, sessionToken });\n      }\n    }).then((credentials) => {\n      this.networking.getApps({ sessionToken: credentials.sessionToken, ownerId: credentials.userId }, (err, result) => {\n        // mask the error by checking the status code.\n        if (this.interactive) {\n          if (result) this.logger.info(colors.green('session is valid'));\n          else this.logger.info(colors.red('session is invalid'));\n        } else {\n          abstractedPromise.resolve({ sessionValid: result !== undefined });\n        }\n      });\n    }).catch((error) => {\n      if (this.interactive) this.logger.error(error);\n      else abstractedPromise.reject(error);\n    });\n\n    return abstractedPromise;\n  }\n\n  createSession({ email, password }) {\n    const abstractedPromise = this.createPromise();\n    const inputParams = [\n      {\n        field: email,\n        name: 'email',\n        question: 'Please enter your PubNub email',\n        type: 'input'\n      },\n      {\n        field: password,\n        name: 'password',\n        question: 'Please enter your PubNub password',\n        type: 'password'\n      }\n    ];\n\n    this.abstractedValidator(inputParams).then((fields) => {\n      this.networking.createLoginToken({ email: fields.email, password: fields.password }, (err, serverResponse) => {\n        if (err) {\n          if (this.interactive) this.logger.error(err);\n          else abstractedPromise.reject(err);\n          return;\n        }\n\n        const userId = serverResponse.result.user_id;\n        const sessionToken = serverResponse.result.token;\n\n        if (this.interactive) {\n          this._createSessionFile({ userId, sessionToken }).then(() => {\n            this.logger.info('Login Succesful, token: ' + sessionToken + ' saved to home directory');\n          });\n        }\n      });\n    }).catch((err) => {\n      if (this.interactive) this.logger.error(err);\n      else abstractedPromise.reject(err);\n      return;\n    });\n\n    return abstractedPromise;\n  }\n\n  createPromise() {\n    let successResolve;\n    let failureResolve;\n    const promise = new Promise((fulfill, reject) => {\n      successResolve = fulfill;\n      failureResolve = reject;\n    });\n\n    return { promise, reject: failureResolve, resolve: successResolve };\n  }\n\n  abstractedValidator(params = []) {\n    const response = {};\n    let validationPassing = true; // optimism.\n    const questions = [];\n\n    params.forEach((param) => {\n      if (param.field && _.trim(param.field) !== '') {\n        response[param.name] = _.trim(param.field);\n      } else if (this.interactive) {\n        questions.push({ type: param.type, name: param.name, message: param.question });\n      } else {\n        validationPassing = false;\n      }\n    });\n\n    return new Promise((resolve, reject) => {\n      if (this.interactive) {\n        if (questions.length === 0) return resolve(response);\n\n        inquirer.prompt(questions).then((promptResult) => {\n          Object.assign(response, promptResult);\n          resolve(response);\n        });\n      } else {\n        if (validationPassing) resolve(response);\n        else reject(/* TODO */);\n        return;\n      }\n    });\n  }\n\n  deleteSession() {\n    return this._deleteSessonFile().then(() => {\n      if (this.interactive) this.logger.info('PubNub Session Deleted');\n    });\n  }\n\n  _fetchSessionFile() {\n    return new Promise((resolve) => {\n      fs.readFile(this.sessionStorage, 'utf8', (err, data) => {\n        if (err) resolve({}); else resolve(JSON.parse(data));\n      });\n    });\n  }\n\n  _createSessionFile({ sessionToken, userId }) {\n    return this._deleteSessonFile().then(() => {\n      return new Promise((resolve, reject) => {\n        fs.writeFile(this.sessionStorage, JSON.stringify({ sessionToken, userId }), (err) => {\n          if (err) reject(err); else resolve();\n        });\n      });\n    });\n  }\n\n  _deleteSessonFile() {\n    return new Promise((resolve, reject) => {\n      fs.unlink(this.sessionStorage, (err) => {\n        // silence file not found\n        if (err && err.code !== 'ENOENT') reject(err); else resolve();\n      });\n    });\n  }\n\n}\n"]}