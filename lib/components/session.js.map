{"version":3,"sources":["components/session.js"],"names":["logger","networking","interactive","sessionStorage","homedir","email","password","inputParams","field","name","question","type","abstractedPromise","createPromise","abstractedValidator","then","fields","createLoginToken","err","serverResponse","error","reject","userId","result","user_id","sessionToken","token","_createSessionFile","info","catch","successResolve","failureResolve","promise","Promise","fulfill","resolve","params","response","validationPassing","questions","forEach","param","trim","push","message","length","prompt","promptResult","Object","assign","_deleteSessonFile","readFile","data","JSON","parse","writeFile","stringify","unlink","code"],"mappings":"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","file":"session.js","sourcesContent":["import os from 'os';\nimport fs from 'fs';\nimport inquirer from 'inquirer';\nimport _ from 'lodash';\n\nexport default class {\n\n  constructor({ logger, networking, interactive = false }) {\n    this.logger = logger;\n    this.networking = networking;\n    this.sessionStorage = os.homedir() + '/.pubnub-cli';\n    this.interactive = interactive;\n  }\n\n  createSession({ email, password }) {\n    const inputParams = [\n      {\n        field: email,\n        name: 'email',\n        question: 'Please enter your PubNub email',\n        type: 'input'\n      },\n      {\n        field: password,\n        name: 'password',\n        question: 'Please enter your PubNub password',\n        type: 'password'\n      }\n    ];\n\n    const abstractedPromise = this.createPromise();\n\n    this.abstractedValidator(inputParams).then((fields) => {\n      this.networking.createLoginToken({ email: fields.email, password: fields.password }, (err, serverResponse) => {\n        if (err) {\n          if (this.interactive) this.logger.error(err);\n          else abstractedPromise.reject(err);\n          return;\n        }\n\n        const userId = serverResponse.result.user_id;\n        const sessionToken = serverResponse.result.token;\n\n        if (this.interactive) {\n          this._createSessionFile({ userId, sessionToken }).then(() => {\n            this.logger.info('Login Succesful, token: ' + sessionToken + ' saved to home directory');\n          });\n        }\n      });\n    }).catch((err) => {\n      if (this.interactive) this.logger.error(err);\n      else abstractedPromise.reject(err);\n      return;\n    });\n\n    return abstractedPromise;\n  }\n\n  createPromise() {\n    let successResolve;\n    let failureResolve;\n    const promise = new Promise((fulfill, reject) => {\n      successResolve = fulfill;\n      failureResolve = reject;\n    });\n\n    return { promise, reject: failureResolve, resolve: successResolve };\n  }\n\n  abstractedValidator(params = []) {\n    const response = {};\n    let validationPassing = true; // optimism.\n    const questions = [];\n\n    params.forEach((param) => {\n      if (param.field && _.trim(param.field) !== '') {\n        response[param.name] = _.trim(param.field);\n      } else if (this.interactive) {\n        questions.push({ type: param.type, name: param.name, message: param.question });\n      } else {\n        validationPassing = false;\n      }\n    });\n\n    return new Promise((resolve, reject) => {\n      if (this.interactive) {\n        if (questions.length === 0) return resolve(response);\n\n        inquirer.prompt(questions).then((promptResult) => {\n          Object.assign(response, promptResult);\n          resolve(response);\n        });\n      } else {\n        if (validationPassing) resolve(response);\n        else reject(/* TODO */);\n        return;\n      }\n    });\n  }\n\n  deleteSession() {\n    return this._deleteSessonFile().then(() => {\n      if (this.interactive) this.logger.info('PubNub Session Deleted');\n    });\n  }\n\n  _fetchSessionFile() {\n    return new Promise((resolve) => {\n      fs.readFile(this.sessionStorage, 'utf8', (err, data) => {\n        if (err) this.logger.error(err);\n        resolve(JSON.parse(data));\n      });\n    });\n  }\n\n  _createSessionFile({ sessionToken, userId }) {\n    return this._deleteSessonFile().then(() => {\n      return new Promise((resolve) => {\n        fs.writeFile(this.sessionStorage, JSON.stringify({ sessionToken, userId }), (err) => {\n          if (err) this.logger.error(err);\n          resolve();\n        });\n      });\n    });\n  }\n\n  _deleteSessonFile() {\n    return new Promise((resolve) => {\n      fs.unlink(this.sessionStorage, (err) => {\n        // silence file not found\n        if (err && err.code !== 'ENOENT') this.logger.error(err);\n        resolve();\n      });\n    });\n  }\n\n}\n"]}