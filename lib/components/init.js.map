{"version":3,"sources":["components/init.js"],"names":["logger","networking","interactive","blockManifestFile","folderPath","error","existingManifest","readFileSync","join","e","red","inputParams","field","name","question","type","default","kebabCase","basename","then","fields","info","JSON","stringify","prompt","message","result","okayToWrite","dependencies","writeFileSync"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;AAIE,wBAAyD;AAAA,QAA3CA,MAA2C,QAA3CA,MAA2C;AAAA,QAAnCC,UAAmC,QAAnCA,UAAmC;AAAA,gCAAvBC,WAAuB;AAAA,QAAvBA,WAAuB,oCAAT,KAAS;;AAAA;;AACvD,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,iBAAL,GAAyB,YAAzB;AACD;;;;uCAE2B;AAAA;;AAAA,UAAdC,UAAc,SAAdA,UAAc;;AAE1B,UAAI,CAAC,KAAKF,WAAV,EAAuB;AACrB,aAAKF,MAAL,CAAYK,KAAZ,CAAkB,qDAAlB;AACA;AACD;;AAED,UAAIC,mBAAmB,IAAvB;;AAEA,UAAI;AACFA,2BAAmB,aAAGC,YAAH,CAAgB,eAAKC,IAAL,CAAUJ,UAAV,EAAsB,KAAKD,iBAA3B,CAAhB,EAA+D,OAA/D,CAAnB;AACD,OAFD,CAEE,OAAOM,CAAP,EAAU,CAEX;;AAED,UAAIH,qBAAqB,IAAzB,EAA+B;AAC7B,aAAKN,MAAL,CAAYK,KAAZ,CAAkB,eAAOK,GAAP,CAAW,KAAKP,iBAAL,GAAyB,wCAApC,CAAlB;AACD;;AAED,UAAMQ,cAAc,CAClB;AACEC,eAAO,IADT;AAEEC,cAAM,MAFR;AAGEC,kBAAU,6BAHZ;AAIEC,cAAM,OAJR;AAKEC,iBAAS,iBAAEC,SAAF,CAAY,eAAKC,QAAL,CAAcd,UAAd,CAAZ;AALX,OADkB,EAQlB;AACEQ,eAAO,IADT;AAEEC,cAAM,aAFR;AAGEC,kBAAU,oCAHZ;AAIEC,cAAM;AAJR,OARkB,EAclB;AACEH,eAAO,IADT;AAEEC,cAAM,SAFR;AAGEC,kBAAU,+BAHZ;AAIEC,cAAM,OAJR;AAKEC,iBAAS;AALX,OAdkB,EAqBlB;AACEJ,eAAO,IADT;AAEEC,cAAM,SAFR;AAGEC,kBAAU,iCAHZ;AAIEC,cAAM,OAJR;AAKEC,iBAAS;AALX,OArBkB,CAApB;;AA8BA,sCAAoBL,WAApB,EAAiC,KAAKT,WAAtC,EAAmDiB,IAAnD,CAAwD,UAACC,MAAD,EAAY;AAClE,cAAKpB,MAAL,CAAYqB,IAAZ,CAAiB,mCAAmC,MAAKlB,iBAAxC,GAA4D,UAA5D,GAAyEmB,KAAKC,SAAL,CAAeH,MAAf,EAAuB,IAAvB,EAA6B,IAA7B,CAA1F;;AAEA,2BAASI,MAAT,CAAgB,EAAET,MAAM,SAAR,EAAmBF,MAAM,aAAzB,EAAwCG,SAAS,IAAjD,EAAuDS,SAAS,+BAAhE,EAAhB,EAAmHN,IAAnH,CAAwH,UAACO,MAAD,EAAY;AAClI,cAAIA,OAAOC,WAAX,EAAwB;AACtBP,mBAAOQ,YAAP,GAAsB,EAAtB;AACA,yBAAGC,aAAH,CAAiB,eAAKrB,IAAL,CAAUJ,UAAV,EAAsB,MAAKD,iBAA3B,CAAjB,EAAgEmB,KAAKC,SAAL,CAAeH,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAhE;AACA,kBAAKpB,MAAL,CAAYqB,IAAZ,CAAiB,MAAKlB,iBAAL,GAAyB,mBAAzB,GAA+C,eAAKK,IAAL,CAAUJ,UAAV,EAAsB,MAAKD,iBAA3B,CAAhE;AACD;AACF,SAND;AAOD,OAVD;AAWD","file":"init.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport colors from 'colors/safe';\nimport _ from 'lodash';\nimport inquirer from 'inquirer';\n\nimport { abstractedValidator } from '../utils';\n\nexport default class {\n\n  constructor({ logger, networking, interactive = false }) {\n    this.logger = logger;\n    this.networking = networking;\n    this.interactive = interactive;\n    this.blockManifestFile = 'block.json';\n  }\n\n  createBlock({ folderPath }) {\n    // disable this method for non interactive use.\n    if (!this.interactive) {\n      this.logger.error('#createBlock not supported for non-interactive mode');\n      return;\n    }\n\n    let existingManifest = null;\n\n    try {\n      existingManifest = fs.readFileSync(path.join(folderPath, this.blockManifestFile), 'utf-8');\n    } catch (e) {\n      // silence\n    }\n\n    if (existingManifest !== null) {\n      this.logger.error(colors.red(this.blockManifestFile + 'already exists. aborting initalization'));\n    }\n\n    const inputParams = [\n      {\n        field: null,\n        name: 'name',\n        question: 'Please enter the BLOCK name',\n        type: 'input',\n        default: _.kebabCase(path.basename(folderPath))\n      },\n      {\n        field: null,\n        name: 'description',\n        question: 'Please enter the BLOCK description',\n        type: 'input'\n      },\n      {\n        field: null,\n        name: 'license',\n        question: 'Please enter the license type',\n        type: 'input',\n        default: 'ISC'\n      },\n      {\n        field: null,\n        name: 'version',\n        question: 'Please enter the inital version',\n        type: 'input',\n        default: '1.0.0'\n      }\n    ];\n\n    abstractedValidator(inputParams, this.interactive).then((fields) => {\n      this.logger.info('About to create the following ' + this.blockManifestFile + ' file \\n' + JSON.stringify(fields, null, '\\t'));\n\n      inquirer.prompt({ type: 'boolean', name: 'okayToWrite', default: true, message: 'Good to write to file system?' }).then((result) => {\n        if (result.okayToWrite) {\n          fields.dependencies = {};\n          fs.writeFileSync(path.join(folderPath, this.blockManifestFile), JSON.stringify(fields, null, 4));\n          this.logger.info(this.blockManifestFile + 'file created at: ' + path.join(folderPath, this.blockManifestFile));\n        }\n      });\n    });\n  }\n\n}\n"]}