{"version":3,"sources":["index.js"],"names":["os","require","inquirer","cli","enable","async","fs","PUBNUB","slug","shelljs","envs","packageInfo","Networking","setApp","version","parse","block","key","file","env","email","insert","password","log_level","workingDir","String","pwd","main","args","options","tasks","blockFile","sessionFile","homedir","info","userQuestions","name","message","type","validate","input","result","indexOf","self","session","blockLocal","blockRemote","eventHandler","blockFileRequired","api","logLevel","endpoint","host","fatal","ok","mergeEventHandler","data","debug","_id","id","event","channels","output","updateEventHandler","revise","cb","o","default","choices","qs","Object","keys","forEach","hasOwnProperty","push","length","eventHandlerName","error","prompt","then","mergeBlock","_key_id","key_id","description","updateBlock","restore","blockCreate","subscribe_key","publish_key","createBlock","keyId","blockPayload","err","payload","explain","opts","b","k","f","hint","command","sessionFileGet","readJson","sessionDelete","unlink","sessionGet","login","args2","spinner","createLoginToken","outputJson","spaces","err2","updateSessionToken","token","answers","expires","Date","getTime","user","requireInit","blockRead","blockFileCreate","keyGet","givenKey","getApps","ownerId","paramKey","app","value","Separator","value2","properties","blockGet","givenBlock","createcb","getBlocks","paramBlock","blockWrite","blockPush","blockPushArgs","blockId","blockStart","startBlock","pubnub","init","origin","chan","realtime_analytics_channel","subscribe","channel","m","state","JSON","stringify","blockStop","stopBlock","eventHandlerGet","paramEventHandler","event_handlers","eventHandlerWrite","eachSeries","eh","holla","fullPath","noIds","found","appendEH","outputFile","code","i","index","blockComplete","eventHandlerComplete","mapSeries","results","eventHandlerPush","update","done","eventHandlerId","eventHandlerPayload","block_id","createEventHandler","each","testJson","readFile","existsSync","testVars","readFileSync","replace","routes","functions","success","logout","pull","start","stop","series","process","exit"],"mappings":"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","file":"index.js","sourcesContent":["const os = require('os'); // os level functions\n\nconst inquirer = require('inquirer'); // interactive mode selection\nconst cli = require('cli').enable('status'); // Enable cli.ok, cli.error, etc\nconst async = require('async'); // async control flow\nconst fs = require('fs-extra'); // json support for fs\nconst PUBNUB = require('pubnub'); // obviously\nconst slug = require('slug'); // strips characters for friendly file names\nconst shelljs = require('shelljs'); // ability to run shell commands\n\nconst envs = require('./../envs'); // location of block environment configs\nconst packageInfo = require('./../package');\nconst Networking = require('./networking');\n\n// enable plugins\ncli.enable('version');\n\n// configure self reporting.\ncli.setApp('PubNub CLI', packageInfo.version);\n\n// cli arguments and commands\ncli.parse({\n  block: ['b', 'Block ID', 'int'],\n  key: ['k', 'Subscribe Key ID', 'int'],\n  file: ['f', 'A block file', 'path'],\n  env: ['e', 'An environment [bronze, silver, gold, prod]', 'string'],\n  email: ['m', 'Email', 'string'],\n  insert: ['n', 'Insert Mode. Create new blocks and skip prompts.', true, false],\n  password: ['p', 'Password', 'string'],\n  log_level: [false, 'set logging verbosity (info, debug)', 'string', 'info'],\n}, ['login', 'logout', 'start', 'stop', 'init', 'push', 'pull']);\n\n// sets all file operations relative to the current directory\nconst workingDir = String(shelljs.pwd() + '/');\n\n// cli function to parse arguments and options\ncli.main(function (args, options) {\n  options.file = options.file || '/';\n\n  // an array of functions to run through in series\n  // search for the string 'routes' in your IDE for more info\n  const tasks = [];\n\n  // default file location is pwd\n  const blockFile = workingDir + options.file + 'block.json';\n\n  // token and user info stored in home directory as this file\n  const sessionFile = os.homedir() + '/.pubnub-cli';\n\n  if (options.insert) {\n    cli.info('Warning! Insert option provided.');\n    cli.info('Creating new blocks and skipping prompts.');\n  }\n\n  // user login questions for inquirer\n  const userQuestions = {\n    email: {\n      name: 'email',\n      message: 'PubNub Email:',\n      type: 'input',\n      validate(input) {\n        let result = true;\n\n        if (input.indexOf('@') === -1) { // I apologize\n          result = 'Please enter a valid email address.';\n        }\n\n        return result;\n      }\n    },\n    password: {\n      name: 'password',\n      message: 'PubNub Password:',\n      type: 'password'\n    }\n  };\n\n  const self = this;\n\n  // methods in this object are pushed into the ```tasks``` array\n  // then those methods are executed in series\n  // as the methods execute, they populate properties of this object\n  // these properties may be accessed by functions executed later\n\n  self.session = false; // the user session\n  self.blockLocal = false; // the local block file\n  self.blockRemote = false; // the remove block json object\n  self.key = false; // the selected key object\n  self.eventHandler = false; // the selected event handler object\n\n  self.blockFileRequired = false;\n\n  // specify the required environment\n  options.env = options.env || 'prod';\n\n  self.env = envs[options.env]; // map the env string to an object\n\n  // pubnub-api is a custom api client for portal related operations\n  const api = new Networking({\n    logLevel: options.log_level,\n    endpoint: self.env.host\n  });\n\n  if (!self.env) {\n    cli.fatal('Invalid environment');\n  } else {\n    cli.ok('Working with ' + options.env + ' environment at ' + self.env.host);\n  }\n\n  // this merges a remote event handler with a local event handler\n  const mergeEventHandler = function (input, data) {\n    cli.debug('Merging remote event handle with local event handler.');\n\n    input._id = data.id || input._id;\n    input.name = data.name || input.name;\n    input.event = data.event || input.event;\n    input.channels = data.channels || input.channels;\n    input.file = input.file || data.file; // local attribute wins\n    input.output = data.output || input.output;\n\n    return input;\n  };\n\n  // interactive mode of creating/updating/merging an event handler\n  const updateEventHandler = function (eventHandler, revise, cb) {\n    // questions for inquirer\n    const o = {\n      name: {\n        name: 'name',\n        message: 'Name:',\n        type: 'input',\n        default: eventHandler.name\n      },\n      event: {\n        name: 'event',\n        message: 'Event:',\n        type: 'list',\n        default: eventHandler.event,\n        choices: ['js-after-publish', 'js-before-publish',\n          'js-after-presence'\n        ]\n      },\n      channels: {\n        name: 'channels',\n        message: 'PubNub Channels:',\n        type: 'input',\n        default: eventHandler.channels\n      },\n      output: {\n        name: 'output',\n        message: 'Output:',\n        type: 'input',\n        default: eventHandler.output\n      }\n    };\n\n    // if we're missing this property\n    // add interactive question to an array\n    const qs = [];\n    Object.keys(o).forEach((key) => {\n      if (revise || !eventHandler.hasOwnProperty(key)) {\n        qs.push(o[key]);\n      }\n    });\n\n    if (qs.length) {\n      // if there are questions, prompt the user\n      if (!revise) {\n        const eventHandlerName = eventHandler.name || eventHandler.event || 'Unknown';\n        cli.error('Event handler ' + eventHandlerName + ' is missing some information.');\n      }\n\n      inquirer.prompt(qs).then(cb);\n    } else {\n      // otherwise, return\n      cb(eventHandler);\n    }\n  };\n\n  // merges a remote block with what exists on the local filesystem\n  const mergeBlock = function (input, data) {\n    cli.debug('Merging remote block with local block.');\n\n    input._id = data.id || input._id;\n    input._key_id = data.key_id || input._key_id;\n    input.name = data.name || input.name;\n    input.description = data.description || input.description;\n\n    return input;\n  };\n\n  // updates a block object with information from interactive mode\n  const updateBlock = function (block, revise, cb) {\n    // questions for inquirer\n    const o = {\n      name: {\n        name: 'name',\n        message: 'Name:',\n        type: 'input',\n        default: block.name\n      },\n      description: {\n        name: 'description',\n        message: 'Description:',\n        type: 'input',\n        default: block.description\n      }\n    };\n\n    // if the block does not have the property\n    // add the prompt to a list of questions\n    const qs = [];\n    Object.keys(o).forEach((key) => {\n      if (revise || !block.hasOwnProperty(key)) {\n        qs.push(o[key]);\n      }\n    });\n\n    if (qs.length) {\n      // if we need to prompt, feed the list to interactive mode\n      if (!revise) {\n        cli.error('Block.json is missing some information.');\n      }\n\n      inquirer.prompt(qs).then(cb);\n    } else {\n      // otherwise just return\n      cb(block);\n    }\n  };\n\n  // update the pubnub-api lib with the local sessions\n  const restore = function (session, cb) {\n    api.session = session;\n    cb(null, session);\n  };\n\n  const blockCreate = function (key, cb) {\n    updateBlock(self.blockLocal, !options.insert, (block) => {\n      block.key_id = key.id;\n      block.subscribe_key = key.subscribe_key;\n      block.publish_key = key.publish_key;\n\n      api.createBlock({ keyId: key.id, blockPayload: block }, (err, data) => {\n        cli.ok('Block Created');\n        cb(err ? err.message : null, data.payload);\n      });\n    });\n  };\n\n  // OK: Use this handy command next time:\n  // OK: pubnub-cli push -b 1130 -k 145183\n  const explain = function () {\n    const opts = {};\n\n    // checks for the presence of object properties and informs users\n    // that they can use relevant args as a shortcut\n    if (self.blockRemote) {\n      opts.b = self.blockRemote.id;\n    }\n    if (self.key) {\n      opts.k = self.key.id;\n    }\n    if (options.file && options.file !== '/') {\n      opts.f = options.file;\n    }\n\n    if (Object.keys(opts).length) {\n      let hint = 'pubnub-cli ' + cli.command;\n\n      Object.keys(opts).forEach((key) => {\n        hint = hint + ' -' + key + ' ' + opts[key];\n      });\n\n      cli.ok('Use this handy command next time:');\n      cli.ok(hint);\n    }\n  };\n\n  // restores session from local file\n  self.sessionFileGet = function (cb) {\n    cli.debug('sessionFileGet');\n\n    // see if session file exists\n    cli.info('Reading session from ' + sessionFile);\n    fs.readJson(sessionFile, (err, session) => {\n      if (err) {\n        cb(null);\n      } else {\n        self.session = session;\n        cb(null);\n      }\n    });\n  };\n\n  // deletes the local session file\n  self.sessionDelete = function (cb) {\n    cli.debug('delete_settings');\n\n    if (!self.session) {\n      cli.error('You are not logged in.');\n    } else {\n      cli.info('Deleting session from ' + sessionFile);\n      fs.unlink(sessionFile, (err) => {\n        if (err) {\n          cb(err);\n        } else {\n          cb();\n        }\n      });\n    }\n  };\n\n  // uses the local session file to login\n  self.sessionGet = function (cb) {\n    cli.debug('get_user');\n\n    const login = function (args2) {\n      cli.spinner('Logging In...');\n\n      api.createLoginToken(args2, (err, data) => {\n        if (err) return cli.error(err);\n\n        cli.info('Writing session to ' + sessionFile);\n\n        fs.outputJson(sessionFile, data.result, { spaces: 4 }, (err2) => {\n          self.session = data.result;\n          api.updateSessionToken(data.result.token);\n          cb(err2);\n        });\n      });\n    };\n\n    if (!self.session) {\n      if (cli.command !== 'login') {\n        cli.error('No session found, please log in.');\n      }\n\n      if (options.email || options.password) {\n        if (options.email && options.password) {\n          login({\n            email: options.email,\n            password: options.password\n          }, cb);\n        } else {\n          cli.error('You must supply both email' +\n            ' and password to login.');\n        }\n      } else {\n        // no file found, prompt for user and pass\n        inquirer.prompt([userQuestions.email, userQuestions.password]).then((answers) => {\n          login(answers, cb);\n        });\n      }\n    } else {\n      // we have the session file\n      if (self.session.expires > (new Date().getTime() / 1000)) {\n        cli.ok('Working as ' + self.session.user.email);\n\n        // token is not expired, tell api to restore\n        restore(self.session, cb);\n      } else {\n        // token expired, need to login again\n        cli.error('Session has expired, please login.');\n\n        // supply email, prompt password\n        inquirer.prompt([userQuestions.password]).then((answers) => {\n          answers.email = self.session.user.email;\n          login(answers, cb);\n        });\n      }\n    }\n  };\n\n  // this is a shortcut to require a block.json is supplied\n  self.requireInit = function (cb) {\n    self.blockFileRequired = true;\n    cb();\n  };\n\n  // reads a block.json from wokring dir and sets as self.blockLocal\n  self.blockRead = function (cb) {\n    cli.debug('blockRead');\n\n    cli.info('Reading block.json from ' + blockFile);\n    fs.readJson(blockFile, (err, data) => {\n      if (err) {\n        if (self.blockFileRequired) {\n          cli.info('No block.json found.' +\n            ' Please run pubnub-cli init.');\n        } else {\n          cb(null);\n        }\n      } else {\n        if (data.name) {\n          cli.ok('Working on block ' + data.name);\n        }\n        self.blockLocal = data;\n        cb();\n      }\n    });\n  };\n\n  // creates a block.json in working dir\n  self.blockFileCreate = function (cb) {\n    cli.debug('blockFileCreate');\n\n    cli.info('Checking for block.json in ' + blockFile);\n    fs.readJson(blockFile, (err, data) => {\n      if (data) {\n        cli.info('Block.json already exists.... editing');\n        cb();\n      } else {\n        cli.info('Writing block.json to ' + blockFile);\n        fs.outputJson(blockFile, {}, {\n          spaces: 4\n        }, cb);\n      }\n    });\n  };\n\n  // sets self.key\n  self.keyGet = function (cb) {\n    cli.debug('keyGet');\n\n    // looks first in options, then in remote block, then local block\n    const givenKey = options.key || self.blockRemote.key_id || self.blockLocal._key_id;\n\n    api.getApps({ ownerId: self.session.user.id }, (err, data) => {\n      // if key is supplied through cli or file\n      if (givenKey) {\n        // we need to map the key id to the key object\n        let paramKey = false;\n\n        data.result.forEach((app) => {\n          app.keys.forEach((value) => {\n            if (givenKey === value.id) {\n              paramKey = value;\n            }\n          });\n        });\n\n        if (!paramKey) {\n          cb('Invalid key ID');\n        } else {\n          self.key = paramKey;\n          cb(err);\n        }\n      } else {\n        // create an interactive key selection\n        const choices = [];\n\n        // loop through apps\n        data.result.forEach((value) => {\n          choices.push(new inquirer.Separator('---' + value.name));\n\n          // loop through keys in app\n          value.keys.forEach((value2) => {\n            choices.push({\n              name: value2.properties.name || value2.subscribe_key,\n              value: value2\n            });\n          });\n        });\n\n        cli.ok('Which app are you working on?');\n\n        inquirer.prompt([{ type: 'list', name: 'key', message: 'Select a key', choices }]).then((answers) => {\n          self.key = answers.key;\n          cb(err);\n        });\n      }\n    });\n  };\n\n  // gets a remote block and sets as self.blockRemote\n  self.blockGet = function (cb) {\n    cli.debug('block');\n\n    // look for the key in options\n    // then remote block, then local block\n    const givenBlock = options.block || self.blockRemote.id || self.blockLocal._id;\n\n    const createcb = function () {\n      blockCreate(self.key, (err2, data) => {\n        self.blockRemote = data;\n        cb(err2);\n      });\n    };\n\n    api.getBlocks({ keyId: self.key.id }, (err, result) => {\n      if (err) {\n        cb(err);\n      } else {\n        // if we force upsert, forget prompts\n        if (options.insert) {\n          createcb();\n        } else if (givenBlock) {\n          // if block is supplied through cli\n          let paramBlock = false;\n\n          result.payload.forEach((value) => {\n            if (givenBlock === value.id) {\n              paramBlock = value;\n            }\n          });\n\n          if (!paramBlock) {\n            cb('Invalid block ID');\n          } else {\n            self.blockRemote = paramBlock;\n            cb(null);\n          }\n        } else {\n          // choose block with gui\n          const choices = [];\n          choices.push(new inquirer.Separator('--- Admin'));\n\n          choices.push({\n            name: 'Create a New Block',\n            value: false\n          });\n\n          if (result.payload.length) {\n            choices.push(new inquirer.Separator('--- Blocks'));\n\n            result.payload.forEach((value) => {\n              choices.push({ name: value.name, value });\n            });\n          }\n\n          cli.ok('Which block are you working on?');\n\n          inquirer.prompt([{ type: 'list', name: 'block', message: 'Select a block', choices }]).then((answers) => {\n            if (!answers.block) {\n              createcb();\n            } else {\n              self.blockRemote = answers.block;\n              cb(null);\n            }\n          });\n        }\n      }\n    });\n  };\n\n  // writes block to the local file\n  self.blockWrite = function (cb) {\n    cli.debug('blockWrite');\n\n    // if for some reason blockLocal has key_id, remove it\n    if (self.blockLocal.key_id) {\n      delete self.blockLocal.key_id;\n    }\n\n    self.blockLocal._key_id = self.key.id;\n    self.blockLocal._id = self.blockRemote.id;\n    self.blockLocal.name = self.blockRemote.name;\n    self.blockLocal.description = self.blockRemote.description;\n\n    cli.info('Writing block.json to ' + blockFile);\n    fs.outputJson(blockFile, self.blockLocal, { spaces: 4 }, cb);\n  };\n\n  // pushes self.blockLocal to endpoint\n  self.blockPush = function (cb) {\n    cli.debug('blockPush');\n\n    const blockPushArgs = {\n      keyId: self.blockRemote.key_id,\n      blockId: self.blockRemote.id,\n      blockPayload: self.blockLocal\n    };\n\n    api.updateBlock(blockPushArgs, (err) => {\n      cb(err ? err.message : null);\n    });\n  };\n\n  // starts block on pubnub server\n  self.blockStart = function (cb) {\n    cli.debug('blockStart');\n\n    api.startBlock({ keyId: self.blockLocal._key_id, blockId: self.blockLocal._id }, () => {\n      cli.ok('Sending Start Command');\n\n      // after it starts\n      // we need to subscribe to the channel to see output\n      const pubnub = PUBNUB.init({\n        subscribe_key: self.key.subscribe_key,\n        publish_key: self.key.publish_key,\n        origin: self.env.origin\n      });\n\n      // the channel is crazy\n      const chan = 'blocks-state-' +\n        self.key.properties.realtime_analytics_channel +\n        '.' + self.blockLocal._id;\n\n      cli.info('Subscribing to blocks status channel...');\n\n      // show a loading spinner\n      cli.spinner('Starting Block...');\n\n      // subscribe to status channel\n      pubnub.subscribe({\n        channel: chan,\n        message(m) {\n          if (m.state === 'running') {\n            cli.spinner('Starting Block... OK', true);\n            cli.ok('Block State: ' + m.state);\n            cb();\n          } else if (m.state === 'stopped') {\n            cli.ok('Block State: ' + m.state);\n            cb();\n          } else {\n            if (m.state !== 'pending') {\n              cli.info('Block State: ' + m.state + '...');\n            }\n          }\n        },\n        error(error) {\n          // Handle error here\n          cb(JSON.stringify(error));\n        }\n      });\n    });\n  };\n\n  // issue block stop request on server\n  self.blockStop = function (cb) {\n    cli.debug('blockStop');\n\n    api.stopBlock({ keyId: self.blockLocal._key_id, blockId: self.blockLocal._id }, (err) => {\n      cb(err);\n    });\n  };\n\n  // get event handler from server and set as self.eventHandler\n  self.eventHandlerGet = function (cb) {\n    cli.debug('eventHandler');\n\n    // if event is supplied through cli\n    if (options.eventHandler) {\n      let paramEventHandler = false;\n\n      self.blockRemote.event_handlers.forEach((value) => {\n        if (options.eventHandler === value.id) {\n          paramEventHandler = value;\n        }\n      });\n\n      if (!paramEventHandler) {\n        cb('Invalid event handler ID');\n      } else {\n        self.eventHandler = paramEventHandler;\n        cb(null);\n      }\n    } else {\n      const choices = [];\n\n      self.blockRemote.event_handlers.forEach((value) => {\n        choices.push({ name: value.name, value });\n      });\n\n      cli.ok('Which event handler?');\n\n      const message = 'Select an event handler';\n      inquirer.prompt([{ type: 'list', name: 'eventHandler', message, choices }]).then((answers) => {\n        self.eventHandler = answers.eventHandler;\n        cb(null);\n      });\n    }\n  };\n\n  // write the event handler to a js file within a directory\n  self.eventHandlerWrite = function (cb) {\n    cli.debug('eventHandlerWrite');\n\n    self.blockLocal.event_handlers = self.blockLocal.event_handlers || [];\n\n    // for each server event handler\n    async.eachSeries(self.blockRemote.event_handlers, (eh, holla) => {\n      cli.info('Working on ' + eh.name);\n\n      eh.file = eh.event + '/' + slug(eh.name) + '.js';\n      const fullPath = workingDir + options.file + eh.file;\n\n      // try to find event handler with same id\n      const noIds = []; // count the number of eh with no id\n\n      let found = false;\n\n      self.blockLocal.event_handlers.forEach((value) => {\n        // if ids match\n        // overwrite local with what we have on server\n        if (eh.id === value._id) {\n          found = true;\n          value = mergeEventHandler(value, eh);\n        }\n\n        // find event handlers on server that do not exist locally\n        if (!value._id) {\n          noIds.push(value);\n        }\n      });\n\n      // writes an event handler to disk\n      const appendEH = function () {\n        cli.info('Writing event handler to ' + fullPath);\n        fs.outputFile(fullPath, eh.code, () => {\n          cli.debug('writing eventHandler');\n          self.blockLocal.event_handlers.push(mergeEventHandler({}, eh));\n          holla();\n        });\n      };\n\n      // if server event handler exists and no match found\n      if (!found) {\n        // if all the existing eh in the file have ids\n        if (!noIds.length) {\n          // write the file and push\n          appendEH();\n        } else {\n          cli.error('There is a remote event handler that does not have a local link.');\n          cli.error('Does this (server) event handler match a (local) event handler?');\n\n          cli.info('Event Handler Name: ' + eh.name);\n          cli.info('Event Handler Description: ' + eh.description);\n\n          const choices = [];\n\n          choices.push(new inquirer.Separator('--- Select'));\n\n          let i = 0;\n          self.blockLocal.event_handlers.forEach((value) => {\n            choices.push({ name: value.name, value: { index: i, value } });\n            i += 1;\n          });\n\n          choices.push(new inquirer.Separator('--- Create'));\n\n          choices.push({ name: 'Create a new event handler', value: false });\n\n          cli.info('prompt');\n\n          inquirer.prompt([{\n            type: 'list',\n            name: 'eh',\n            message: 'Which event handler is this?',\n            choices\n          }]).then((answers) => {\n            if (!answers.eh) {\n              appendEH();\n            } else {\n              mergeEventHandler(\n                self.blockLocal.event_handlers[\n                  answers.eh.index], eh);\n              holla(null);\n            }\n          });\n        }\n      }\n    },\n      () => {\n        cli.debug('Writing event handlers to block.json to ' + blockFile);\n        fs.outputJson(blockFile, self.blockLocal, { spaces: 4 }, cb);\n      }\n    );\n  };\n\n  // ensures that all properties exist within block.json\n  self.blockComplete = function (cb) {\n    cli.debug('ensuring block in block.json is complete');\n\n    updateBlock(self.blockLocal, false, (data) => {\n      self.blockLocal = mergeBlock(self.blockLocal, data);\n\n      cli.debug('Writing block.json to ' + blockFile);\n      fs.outputJson(blockFile, self.blockLocal, { spaces: 4 }, cb);\n    });\n  };\n\n  // ensures that all needed properties exist within eventHandler\n  self.eventHandlerComplete = function (cb) {\n    cli.debug('ensuring event handler in block.json is complete');\n\n    async.mapSeries(self.blockLocal.event_handlers, (eh, holla) => {\n      updateEventHandler(eh, false, (data) => {\n        holla(null, mergeEventHandler(eh, data));\n      });\n    }, (err, results) => {\n      self.blockLocal.event_handlers = results;\n\n      cli.debug('Writing block.json in' + blockFile);\n      fs.outputJson(blockFile, self.blockLocal, { spaces: 4 }, cb);\n    });\n  };\n\n  // uploads the event handler to the server\n  self.eventHandlerPush = function (cb) {\n    cli.debug('eventHandlerPush');\n\n    const update = function (data, done) {\n      const id = data._id;\n\n      // these properties don't exist on server, so don't send them\n      delete data._id;\n      if (data.file) {\n        delete data.file;\n      }\n\n      if (id) {\n        // if id exists, update (put)\n        api.updateEventHandler({ keyId: self.blockRemote.key_id, eventHandlerId: id, eventHandlerPayload: data }, done);\n      } else {\n        // of id does not exist (update)\n        data.block_id = self.blockRemote.id;\n        data.key_id = self.blockRemote.key_id;\n        data.type = 'js';\n\n        api.createEventHandler({ keyId: self.blockRemote.key_id, eventHandlerPayload: data }, done);\n      }\n    };\n\n    // update all event handlers supplies in block.json\n    async.each(self.blockLocal.event_handlers, (eh, holla) => {\n      if (eh.file) {\n        const fullPath = workingDir + options.file + eh.file;\n        const testJson = workingDir + options.file + 'test.json';\n\n        cli.info('Uploading event handler from ' + fullPath);\n        fs.readFile(fullPath, 'utf8', (err, data) => {\n          if (err) {\n            holla(err.message);\n          } else {\n            // internal use only\n            // see if there's a test.json in directory\n            if (fs.existsSync(testJson)) {\n              // replace placeholder vars with those\n              // in test.json if so\n              const testVars = JSON.parse(fs.readFileSync(testJson, 'utf8'));\n\n              // do the actual replacing\n              Object.keys(testVars).forEach((key) => {\n                data = data.replace(key, testVars[key]);\n              });\n            }\n\n            eh.code = data;\n\n            update(eh, holla);\n          }\n        });\n      } else {\n        update(eh, holla);\n      }\n    }, cb);\n  };\n\n  // this is an array of routes\n  // each route matches a possible command supplies through the cli\n  // ```functions``` is an array of methods that are executed in order\n  // ```success``` is the message displayed\n  // when all methods have been executed\n  const routes = {\n    login: {\n      functions: ['sessionFileGet', 'sessionGet'],\n      success: 'Logged In!'\n    },\n    logout: {\n      functions: ['sessionFileGet', 'sessionDelete'],\n      success: 'Logged Out'\n    },\n    init: {\n      functions: ['sessionFileGet', 'sessionGet',\n        'blockFileCreate', 'blockRead', 'keyGet', 'blockGet',\n        'blockWrite', 'eventHandlerWrite'\n      ],\n      success: 'New block.json written to disk.'\n    },\n    push: {\n      functions: ['sessionFileGet', 'sessionGet', 'blockRead',\n        'keyGet', 'blockGet', 'blockComplete',\n        'eventHandlerComplete', 'eventHandlerPush',\n        'blockPush'\n      ],\n      success: 'Block pushed'\n    },\n    pull: {\n      functions: ['sessionFileGet', 'sessionGet', 'requireInit',\n        'blockRead', 'keyGet', 'blockGet', 'blockWrite',\n        'eventHandlerWrite'\n      ],\n      success: 'Local block.json updated with remote data.'\n    },\n    start: {\n      functions: ['sessionFileGet', 'sessionGet', 'blockRead',\n        'keyGet', 'blockStart'\n      ],\n      success: 'Block started'\n    },\n    stop: {\n      functions: ['sessionFileGet', 'sessionGet', 'blockRead',\n        'blockStop'\n      ],\n      success: 'Block stopped'\n    }\n  };\n\n  // this is the magic function that creates a function queue\n  // using the supplied CLI command\n  routes[cli.command].functions.forEach((value) => {\n    tasks.push(self[value]);\n  });\n\n  // async series is used to execute the commands in series\n  // if one function fails, the process immediately returns\n  // and displays an error\n  async.series(tasks, (err) => {\n    if (err) {\n      // display our error if one is thrown\n      if (err.code) {\n        cli.error(err.code + ' - ' + (err.error || 'There was a problem with that request'));\n      } else {\n        cli.error(err);\n      }\n    } else {\n      // otherwise, display the given success message\n      cli.ok('---------------------------------------');\n      if (routes[cli.command].success) {\n        cli.ok(routes[cli.command].success);\n      }\n      cli.ok('Deluxe!');\n      cli.ok('---------------------------------------');\n\n      // display the 'use this command next time' message\n      explain();\n\n      // forceful exit\n      process.exit(0);\n    }\n  });\n\n  return self;\n});\n"],"sourceRoot":"/source/"}