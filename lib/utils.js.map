{"version":3,"sources":["utils.js"],"names":["createPromise","createPath","abstractedValidator","successResolve","failureResolve","promise","Promise","fulfill","reject","resolve","incomingPath","folderPath","isAbsolute","join","process","cwd","params","interactive","response","validationPassing","questions","defaultValidator","input","trim","length","forEach","param","field","name","push","type","message","question","default","validate","choices","prompt","then","promptResult","Object","assign"],"mappings":";;;;;QAIgBA,a,GAAAA,a;QAWAC,U,GAAAA,U;QAgBAC,mB,GAAAA,mB;;AA/BhB;;;;AACA;;;;AACA;;;;;;AAEO,SAASF,aAAT,GAAyB;AAC9B,MAAIG,uBAAJ;AACA,MAAIC,uBAAJ;AACA,MAAMC,UAAU,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CL,qBAAiBI,OAAjB;AACAH,qBAAiBI,MAAjB;AACD,GAHe,CAAhB;;AAKA,SAAO,EAAEH,gBAAF,EAAWG,QAAQJ,cAAnB,EAAmCK,SAASN,cAA5C,EAAP;AACD;;AAEM,SAASF,UAAT,CAAoBS,YAApB,EAAkC;AACvC,MAAIC,aAAa,EAAjB;;AAEA,MAAID,YAAJ,EAAkB;AAChB,QAAI,eAAKE,UAAL,CAAgBF,YAAhB,CAAJ,EAAmC;AACjCC,mBAAaD,YAAb;AACD,KAFD,MAEO;AACL,qBAAKG,IAAL,CAAUC,QAAQC,GAAR,EAAV,EAAyBL,YAAzB;AACD;AACF,GAND,MAMO;AACLC,iBAAa,eAAKE,IAAL,CAAUC,QAAQC,GAAR,EAAV,EAAyB,GAAzB,CAAb;AACD;;AAED,SAAOJ,UAAP;AACD;;AAEM,SAAST,mBAAT,GAAuD;AAAA,MAA1Bc,MAA0B,uEAAjB,EAAiB;AAAA,MAAbC,WAAa;;AAC5D,MAAMC,WAAW,EAAjB;AACA,MAAIC,oBAAoB,IAAxB;AACA,MAAMC,YAAY,EAAlB;;AAEA,MAAMC,mBAAmB,SAAnBA,gBAAmB,CAACC,KAAD,EAAW;AAClC,WAAQA,UAAU,EAAV,IAAgB,iBAAEC,IAAF,CAAOD,KAAP,EAAcE,MAAd,GAAuB,CAA/C;AACD,GAFD;;AAIAR,SAAOS,OAAP,CAAe,UAACC,KAAD,EAAW;AACxB,QAAIA,MAAMC,KAAN,IAAe,iBAAEJ,IAAF,CAAOG,MAAMC,KAAb,MAAwB,EAA3C,EAA+C;AAC7CT,eAASQ,MAAME,IAAf,IAAuB,iBAAEL,IAAF,CAAOG,MAAMC,KAAb,CAAvB;AACD,KAFD,MAEO,IAAIV,WAAJ,EAAiB;AACtBG,gBAAUS,IAAV,CAAe;AACbC,cAAMJ,MAAMI,IADC;AAEbF,cAAMF,MAAME,IAFC;AAGbG,iBAASL,MAAMM,QAHF;AAIbC,iBAASP,MAAMO,OAJF;AAKbC,kBAAUR,MAAMQ,QAAN,IAAkBb,gBALf;AAMbc,iBAAST,MAAMS;AANF,OAAf;AAQD,KATM,MASA;AACLhB,0BAAoB,KAApB;AACD;AACF,GAfD;;AAiBA,SAAO,IAAIb,OAAJ,CAAY,UAACG,OAAD,EAAUD,MAAV,EAAqB;AACtC,QAAIS,WAAJ,EAAiB;AACf,UAAIG,UAAUI,MAAV,KAAqB,CAAzB,EAA4B,OAAOf,QAAQS,QAAR,CAAP;;AAE5B,yBAASkB,MAAT,CAAgBhB,SAAhB,EAA2BiB,IAA3B,CAAgC,UAACC,YAAD,EAAkB;AAChDC,eAAOC,MAAP,CAActB,QAAd,EAAwBoB,YAAxB;AACA7B,gBAAQS,QAAR;AACD,OAHD;AAID,KAPD,MAOO;AACL,UAAIC,iBAAJ,EAAuBV,QAAQS,QAAR,EAAvB,KACKV;AACL;AACD;AACF,GAbM,CAAP;AAcD","file":"utils.js","sourcesContent":["import inquirer from 'inquirer';\nimport _ from 'lodash';\nimport path from 'path';\n\nexport function createPromise() {\n  let successResolve;\n  let failureResolve;\n  const promise = new Promise((fulfill, reject) => {\n    successResolve = fulfill;\n    failureResolve = reject;\n  });\n\n  return { promise, reject: failureResolve, resolve: successResolve };\n}\n\nexport function createPath(incomingPath) {\n  let folderPath = '';\n\n  if (incomingPath) {\n    if (path.isAbsolute(incomingPath)) {\n      folderPath = incomingPath;\n    } else {\n      path.join(process.cwd(), incomingPath);\n    }\n  } else {\n    folderPath = path.join(process.cwd(), '.');\n  }\n\n  return folderPath;\n}\n\nexport function abstractedValidator(params = [], interactive) {\n  const response = {};\n  let validationPassing = true; // optimism.\n  const questions = [];\n\n  const defaultValidator = (input) => {\n    return (input !== '' && _.trim(input).length > 0);\n  };\n\n  params.forEach((param) => {\n    if (param.field && _.trim(param.field) !== '') {\n      response[param.name] = _.trim(param.field);\n    } else if (interactive) {\n      questions.push({\n        type: param.type,\n        name: param.name,\n        message: param.question,\n        default: param.default,\n        validate: param.validate || defaultValidator,\n        choices: param.choices\n      });\n    } else {\n      validationPassing = false;\n    }\n  });\n\n  return new Promise((resolve, reject) => {\n    if (interactive) {\n      if (questions.length === 0) return resolve(response);\n\n      inquirer.prompt(questions).then((promptResult) => {\n        Object.assign(response, promptResult);\n        resolve(response);\n      });\n    } else {\n      if (validationPassing) resolve(response);\n      else reject(/* TODO */);\n      return;\n    }\n  });\n}\n"]}