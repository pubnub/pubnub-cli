{"version":3,"sources":["utils.js"],"names":["createPromise","abstractedValidator","successResolve","failureResolve","promise","Promise","fulfill","reject","resolve","params","interactive","response","validationPassing","questions","forEach","param","field","trim","name","push","type","message","question","default","length","prompt","then","promptResult","Object","assign"],"mappings":";;;;;QAGgBA,a,GAAAA,a;QAWAC,mB,GAAAA,mB;;AAdhB;;;;AACA;;;;;;AAEO,SAASD,aAAT,GAAyB;AAC9B,MAAIE,uBAAJ;AACA,MAAIC,uBAAJ;AACA,MAAMC,UAAU,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CL,qBAAiBI,OAAjB;AACAH,qBAAiBI,MAAjB;AACD,GAHe,CAAhB;;AAKA,SAAO,EAAEH,gBAAF,EAAWG,QAAQJ,cAAnB,EAAmCK,SAASN,cAA5C,EAAP;AACD;;AAEM,SAASD,mBAAT,GAAuD;AAAA,MAA1BQ,MAA0B,uEAAjB,EAAiB;AAAA,MAAbC,WAAa;;AAC5D,MAAMC,WAAW,EAAjB;AACA,MAAIC,oBAAoB,IAAxB;AACA,MAAMC,YAAY,EAAlB;;AAEAJ,SAAOK,OAAP,CAAe,UAACC,KAAD,EAAW;AACxB,QAAIA,MAAMC,KAAN,IAAe,iBAAEC,IAAF,CAAOF,MAAMC,KAAb,MAAwB,EAA3C,EAA+C;AAC7CL,eAASI,MAAMG,IAAf,IAAuB,iBAAED,IAAF,CAAOF,MAAMC,KAAb,CAAvB;AACD,KAFD,MAEO,IAAIN,WAAJ,EAAiB;AACtBG,gBAAUM,IAAV,CAAe,EAAEC,MAAML,MAAMK,IAAd,EAAoBF,MAAMH,MAAMG,IAAhC,EAAsCG,SAASN,MAAMO,QAArD,EAA+DC,SAASR,MAAMQ,OAA9E,EAAf;AACD,KAFM,MAEA;AACLX,0BAAoB,KAApB;AACD;AACF,GARD;;AAUA,SAAO,IAAIP,OAAJ,CAAY,UAACG,OAAD,EAAUD,MAAV,EAAqB;AACtC,QAAIG,WAAJ,EAAiB;AACf,UAAIG,UAAUW,MAAV,KAAqB,CAAzB,EAA4B,OAAOhB,QAAQG,QAAR,CAAP;;AAE5B,yBAASc,MAAT,CAAgBZ,SAAhB,EAA2Ba,IAA3B,CAAgC,UAACC,YAAD,EAAkB;AAChDC,eAAOC,MAAP,CAAclB,QAAd,EAAwBgB,YAAxB;AACAnB,gBAAQG,QAAR;AACD,OAHD;AAID,KAPD,MAOO;AACL,UAAIC,iBAAJ,EAAuBJ,QAAQG,QAAR,EAAvB,KACKJ;AACL;AACD;AACF,GAbM,CAAP;AAcD","file":"utils.js","sourcesContent":["import inquirer from 'inquirer';\nimport _ from 'lodash';\n\nexport function createPromise() {\n  let successResolve;\n  let failureResolve;\n  const promise = new Promise((fulfill, reject) => {\n    successResolve = fulfill;\n    failureResolve = reject;\n  });\n\n  return { promise, reject: failureResolve, resolve: successResolve };\n}\n\nexport function abstractedValidator(params = [], interactive) {\n  const response = {};\n  let validationPassing = true; // optimism.\n  const questions = [];\n\n  params.forEach((param) => {\n    if (param.field && _.trim(param.field) !== '') {\n      response[param.name] = _.trim(param.field);\n    } else if (interactive) {\n      questions.push({ type: param.type, name: param.name, message: param.question, default: param.default });\n    } else {\n      validationPassing = false;\n    }\n  });\n\n  return new Promise((resolve, reject) => {\n    if (interactive) {\n      if (questions.length === 0) return resolve(response);\n\n      inquirer.prompt(questions).then((promptResult) => {\n        Object.assign(response, promptResult);\n        resolve(response);\n      });\n    } else {\n      if (validationPassing) resolve(response);\n      else reject(/* TODO */);\n      return;\n    }\n  });\n}\n"]}